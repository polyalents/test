const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding database...');
  
  try {
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ foreign keys)
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    await prisma.userCameraPermission.deleteMany();
    await prisma.recording.deleteMany();
    await prisma.apiKey.deleteMany();
    await prisma.user.deleteMany();
    await prisma.camera.deleteMany();
    
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º 24 –∫–∞–º–µ—Ä—ã
    console.log('üìπ –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—ã...');
    const cameras = [];
    for (let i = 1; i <= 24; i++) {
      const camera = await prisma.camera.create({
        data: {
          channelId: i,
          name: `–ö–∞–º–µ—Ä–∞ ${i}`,
          position: i,
          rtspUrl: `rtsp://${process.env.RTSP_USER || 'admin'}:${process.env.RTSP_PASS || 'admin123'}@${process.env.RTSP_BASE_IP || '192.168.4.200'}:${process.env.RTSP_PORT || '62342'}/chID=${i}&streamType=main`,
          status: 'OFFLINE',
          isActive: true
        }
      });
      cameras.push(camera);
      console.log(`‚úÖ Camera ${i} created (ID: ${camera.id})`);
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = [
      { username: 'admin', role: 'ADMIN' },
      { username: 'operator', role: 'OPERATOR' },
      { username: 'user1', role: 'USER' },
      { username: 'user2', role: 'USER' },
      { username: 'user3', role: 'USER' },
      { username: 'user4', role: 'USER' }
    ];

    for (const userData of users) {
      const user = await prisma.user.create({
        data: userData
      });
      console.log(`üë§ User ${user.username} (${user.role}) created (ID: ${user.id})`);

      // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–∞–º
      if (userData.role === 'ADMIN' || userData.role === 'OPERATOR') {
        // –ê–¥–º–∏–Ω –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä - –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–∞–º–µ—Ä–∞–º
        console.log(`üîê –ù–∞–∑–Ω–∞—á–∞–µ–º ${userData.username} –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–∞–º–µ—Ä–∞–º...`);
        for (const camera of cameras) {
          await prisma.userCameraPermission.create({
            data: {
              userId: user.id,
              cameraId: camera.id,
              canView: true,
              canRecord: userData.role === 'ADMIN' || userData.role === 'OPERATOR'
            }
          });
        }
        console.log(`‚úÖ ${userData.username} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ ${cameras.length} –∫–∞–º–µ—Ä–∞–º`);
      } else {
        // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¥–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –∫–∞–º–µ—Ä
        const userNumber = parseInt(userData.username.replace('user', ''));
        const startCamera = (userNumber - 1) * 6 + 1; // user1: 1-6, user2: 7-12, etc.
        const endCamera = Math.min(startCamera + 5, 24);

        console.log(`üîê –ù–∞–∑–Ω–∞—á–∞–µ–º ${userData.username} –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–∞–º ${startCamera}-${endCamera}...`);
        
        for (let i = startCamera; i <= endCamera; i++) {
          const camera = cameras.find(c => c.channelId === i);
          if (camera) {
            await prisma.userCameraPermission.create({
              data: {
                userId: user.id,
                cameraId: camera.id,
                canView: true,
                canRecord: false
              }
            });
          }
        }
        console.log(`‚úÖ ${userData.username} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–∞–º ${startCamera}-${endCamera}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º API –∫–ª—é—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º API
    console.log('üîë –°–æ–∑–¥–∞–µ–º API –∫–ª—é—á...');
    await prisma.apiKey.create({
      data: {
        keyHash: process.env.API_ACCESS_KEY || 'askr-api-key-2025', // –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
        serviceName: 'main_api',
        permissions: {
          cameras: 'all',
          actions: ['read', 'write', 'manage']
        },
        expiresAt: null // –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç
      }
    });
    console.log('‚úÖ API key created');

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('üìº –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏...');
    const testRecordings = [
      {
        cameraId: cameras[0].id, // –ö–∞–º–µ—Ä–∞ 1
        filename: 'camera_1_test_recording.mp4',
        duration: 300, // 5 –º–∏–Ω—É—Ç
        fileSize: BigInt(52428800), // 50MB
        startedBy: 'admin',
        startedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
        endedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000 + 300000) // +5 –º–∏–Ω—É—Ç
      },
      {
        cameraId: cameras[1].id, // –ö–∞–º–µ—Ä–∞ 2  
        filename: 'camera_2_test_recording.mp4',
        duration: 600, // 10 –º–∏–Ω—É—Ç
        fileSize: BigInt(104857600), // 100MB
        startedBy: 'user1',
        startedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
        endedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000 + 600000) // +10 –º–∏–Ω—É—Ç
      }
    ];

    for (const recordingData of testRecordings) {
      const recording = await prisma.recording.create({
        data: recordingData
      });
      console.log(`üìπ Test recording created: ${recording.filename}`);
    }

    console.log('');
    console.log('üéâ Database seeded successfully!');
    console.log('');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`üìπ –ö–∞–º–µ—Ä: ${cameras.length}`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${await prisma.userCameraPermission.count()}`);
    console.log(`üìº –ó–∞–ø–∏—Å–µ–π: ${testRecordings.length}`);
    console.log(`üîë API –∫–ª—é—á–µ–π: 1`);
    console.log('');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('   admin/admin123 - –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º 24 –∫–∞–º–µ—Ä–∞–º');
    console.log('   operator/op123 - –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º 24 –∫–∞–º–µ—Ä–∞–º');
    console.log('   user1/user123 - –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–∞–º 1-6');
    console.log('   user2/user456 - –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–∞–º 7-12');
    console.log('   user3/user789 - –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–∞–º 13-18');
    console.log('   user4/user999 - –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–∞–º 19-24');
    
  } catch (error) {
    console.error('‚ùå Error during seeding:', error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error('‚ùå Fatal error seeding database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
    console.log('üîå Database connection closed');
  });