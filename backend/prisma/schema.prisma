generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cameras   UserCamera[]
  recordings Recording[]

  @@map("users")
}

model Camera {
  id        Int     @id @default(autoincrement())
  channelId Int     @unique
  name      String
  position  Int?
  rtspUrl   String
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      UserCamera[]
  recordings Recording[]

  @@map("cameras")
}

model UserCamera {
  id       Int @id @default(autoincrement())
  userId   Int
  cameraId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  camera Camera @relation(fields: [cameraId], references: [id], onDelete: Cascade)

  @@unique([userId, cameraId])
  @@map("user_cameras")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  name        String
  key         String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("api_keys")
}

model Recording {
  id        Int             @id @default(autoincrement())
  filename  String
  filePath  String
  cameraId  Int
  userId    Int?
  status    RecordingStatus @default(IN_PROGRESS)
  startTime DateTime
  endTime   DateTime?
  fileSize  BigInt?
  duration  Int?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  camera Camera @relation(fields: [cameraId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@map("recordings")
}

enum UserRole {
  ADMIN
  OPERATOR
  USER
}

enum RecordingStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  DELETED
}
